from Crypto.Util.number import bytes_to_long, long_to_bytes
from sage.all import *
import itertools

exec(open('out.txt', 'r').read())

# Recover N
m1 = bytes_to_long(b"Lorem Ipsum is simply dummy text of")
m2 = bytes_to_long(b"the printing and typesetting industry")
e = 0x10001
lsb = 2**256
n = GCD(pow(m1, e) - c2, pow(m2, e) - c3)
print(f'n = {n}\n')

# Recover u1 and u2
def hardy_muskat_williams_algo(n: Integer) -> list[list[Integer, Integer]]:
	def solve_roots(a, n):
		# return all z, solutions for z^2 = a % n if n is not prime
		# Step 1: Factor n
		factors = []
		for prime, cnt in dict(factor(n)).items():
			factors.extend([prime for _ in range(cnt)])

		# Step 2: Solve fo each primes:
		all_roots = []
		for f in factors:
			x = PolynomialRing(GF(f), 'x').gen()
			roots = []
			c = (-1)%f
			try:
				p = x^2 - a
				roots.extend([r[0] for r in p.roots()])
			except:
				pass	
			all_roots.append(roots)

		roots, moduli = [], []
		for i, r in enumerate(all_roots):
			if r == []:
				continue
			roots.append(r)
			moduli.append(int(factors[i]))

		# Step 3:  CRT on all combinations:
		sol = []
		for combi in list(itertools.product(*roots)):
			combi = [int(x) for x in combi]
			s = CRT(combi, moduli)
			sol.append(s)

		return sol

	def reminder(a, b, Bound):
		if (a < Bound):
			return a
		else:
			return reminder(b, a % b, Bound)

	all_z = solve_roots(a=-1, n=n)
	B = int(pow(n, 1/2))
	r = [reminder(zi, n, Bound=B) for zi in all_z]
	s = [(u, int(pow((n-u**2), 1/2))) for u in r]

	# Verification
	s = [(u, v) for u, v in s if (u**2 + v**2) == n]

	# couple (a,b) can be (b,a)
	result = []
	for u, v in s:
		if (u, v) not in result:
			result.append((u, v))
		if (v, u) not in result:
			result.append((v, u))
	return result


for u1, u2 in hardy_muskat_williams_algo(n=c0):
	print('-'*50)
	print(f'Testing: {u1}, {u2}')

	# Coppersmith to approximate base & partial p
	F = Zmod(n)
	R = PolynomialRing(F, 'x', implementation='NTL')
	x = R.gen()

	base = isqrt((n)/(u1*u2))
	p_approx = u1*base - lsb
	print(f'base ~= {base}')
	print(f'p ~= {p_approx}')
	roots = (x - p_approx).small_roots(X=lsb, beta=0.5)
	for delta in roots:
		p = p_approx-delta
		q = int(n)//int(p)
		d = inverse_mod(e, (p-1)*(q-1))
		flag = pow(c1, d, n)
		print(long_to_bytes(flag))

"""
~/Desktop/dev/en_cours/chall_midnight_2025/RSA Â» sage solve.sage                                                                                                            vozec@Vozec-tower
n = 389007094093500254659269222829300387668660508842596830283034437854937893235049227182800673983137449438686100431357337665683342739525263623592976332059392395264355698296935420024804741703608973190824917028700611656793563033953362739610335126391232258457097837434427619484534528039920830798211549635295178547023617400379055165909284909149495704721001995786010441636120118520833637102034834824318276159998436988458827216771341547723063116002296802980383058543399672672199299812493420476411710717355307773919162706183079395944012029903656708803248090318792228189733289364091794724586461446778415085835534447274059679497460815715111338701331142301424455494636080084200859380926481450668571474030244841321651468346520918746151217651066760145599691569837763734157601936442708850694948902162338810617437621276232570511323743061902828900722778980874258644691568558368246727586863719198403474239414064157294529929203124574829369966931627809307593655658002862921413850262644887434399341306324601519965584391277327657682339232296466760699235858204994705697120103836006265934580279994007554238442080989089861523384446940617433150587916974122607314408287293310331411631383254795350186812538871979413905851197122211878687803160562136852590752062852078911108328555229

....
--------------------------------------------------
Testing: 757042187, 492011439
base ~= 32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166484079552601509396525017501737438028307245290389756681521834301270354
p ~= 24465336953517562924106156911826018553319540976333948699447534971518714922749336825863392778858793409162652132362494212868796904698763509029469969840426077416037584221870348368577022362637462333098045037540329657844034602545791031614164636877912318340433948337885042773066739248060723260059184892949877143091263163375961645150820227350460699907099404756240428109513563012500937025882296249627018811757439238401562625397685696770078296823932408099169368172008807906727357922077351794134131601209937565918289872062232970500945605717629979977082702949272854595946112017622778464719898476873414897916470916537694343677412540784262
b'MCTF{hardy_muskat_williams2coppersmith}'
-----------------------------------------------
....

"""